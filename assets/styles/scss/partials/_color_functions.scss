/* ---------------------------------------------------------------------
Original Author: Shane Smith

Color Functions
------------------------------------------------------------------------ */


/*
 * Updates a supplied number based on a 360 degree color wheel
 *
 * @param {int} $degree
 * @return {int}
 */
@function color_wheel($degree) {
    @if($degree >= 360) {
        $degree: $degree - 360;
    } @else if($degree <= 0) {
        $degree: $degree + 360;
    }

    @return $degree;
}

/*
 * Limits a supplied number to a min of 0 and max of 100 unless loop is true. If loop is true remove/add 100 if over/under 0/100
 *
 * @param {int} $percentage
 * @param {booean} $loop
 * @return {int}
 */
@function percentage_limits($percentage, $loop: false) {
    @if($percentage > 100%) {
        @if($loop == false) {
            $percentage: 100; 
        } @else {
            $percentage: $percentage - 100;
        }
    } @else if($percentage < 0%) {
        @if($loop == false) {
            $percentage: 0; 
        } @else {
            $percentage: $percentage + 100;
        }
    }

    @return $percentage;
}

/*
 * Complimentary color function. 
 * Returns the complimentary color of supplied color
 *
 * @param {string} $color The base color
 * @return {string}
 */
@function complimentary_color($color: $base_color) {
    @return complement($color);
}

/*
 * Analogous Color function.
 * Returns the analagous color shifts based on the supplied color
 *
 * @param {string} $color The base color
 * @param {int} $swatch The swatch color modifier (default 3)
 * @return {string}
 */
@function analogous_color($color: $base_color, $swatch: 3) {
    $hue: hue($color);
    $saturation: saturation($color);
    $lightness: lightness($color);
    $base_degree: 15;

    @if($swatch == 1) {
        $hue: $hue - ($base_degree * 2);
    } @else if ($swatch == 2) {
        $hue: $hue - $base_degree;
    } @else if ($swatch == 4) {
        $hue: $hue + $base_degree;
    } @else if ($swatch == 5) {
        $hue: $hue + ($base_degree * 2);
    }

    @return hsl(color_wheel($hue), $saturation, $lightness);
}

/*
 * Traid Color function
 * Returns the triad color shifts based on the supplied color
 *
 * @param {string} $color The base color
 * @param {int} $swatch The swatch color modifier (default 3)
 * @param {boolean} $brighten Whether we should brighten the color palette
 */
@function triad_color($color: $base_color, $swatch: 3, $brighten: false) {
    $hue: hue($color);
    $saturation: saturation($color);
    $lightness: lightness($color);
    $base_degree: 120;
    $light_diff: 10;

    @if($swatch == 1) {
        $hue: $hue - $base_degree;
        @if($brighten == false) {
            $lightness: $lightness - $light_diff;
        } @else {
            $lightness: $lightness + $light_diff;
        }
    } @else if ($swatch == 2) {
        $hue: $hue - $base_degree;
    } @else if ($swatch == 4) {
        $hue: $hue + $base_degree;
    } @else if ($swatch == 5) {
        $hue: $hue + $base_degree;
        @if($brighten == false) {
            $lightness: $lightness - $light_diff;
        } @else {
            $lightness: $lightness + $light_diff;
        }
    }

    @return hsl(color_wheel($hue), percentage_limits($saturation), percentage_limits($lightness));
}

/*
 * Shade Color function
 * Returns various shades of the base supplied color
 *
 * @param {string} $color The base color
 * @param {int} $swatch The swatch color modifier (default 3)
 * @param {boolean} $brighten Whether we should brighten the color palette
 * @return {string}
 */
@function shade_color($color: $base_color, $swatch: 3, $brighten: false) {
    $hue: hue($color);
    $saturation: saturation($color);
    $lightness: lightness($color);
    $shade_modifier: 18;

    @if($swatch != 3) {
        @if($brighten == false) {
            $saturation: $saturation - ($shade_modifier * $swatch);
            $lightness: $lightness - (($shade_modifier / 1.25) * $swatch);
        } @else {
            $saturation: $saturation + ($shade_modifier * $swatch);
            $lightness: $lightness + (($shade_modifier * 1.25) * $swatch);
        }
    }

    @return hsl($hue, percentage_limits($saturation, true), percentage_limits($lightness, true));
}